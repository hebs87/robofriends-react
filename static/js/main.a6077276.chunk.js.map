{"version":3,"sources":["redux/constants.js","redux/reducers.js","redux/rootReducer.js","components/Header.js","components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundary.jsx","containers/App.js","redux/actions.js","serviceWorker.js","index.js"],"names":["CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","initialStateSearch","searchField","initialStateRobots","robots","error","isPending","rootReducer","combineReducers","searchRobots","state","action","type","Object","assign","payload","requestRobots","Header","nextProps","nextState","nextContext","className","Component","Card","robot","src","id","alt","name","email","CardList","map","SearchBox","onSearchChange","aria-label","placeholder","onChange","Scroll","children","style","overflowY","border","height","ErrorBoundary","props","hasError","errorInfo","this","setState","App","onRequestRobots","filteredRobots","filter","toLowerCase","includes","connect","dispatch","event","text","target","value","fetch","then","res","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","logger","createLogger","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a6077276.chunk.js","sourcesContent":["export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\n// Initial state for the searchRobots reducer\nconst initialStateSearch = {\n  searchField: '',\n}\n\n// Reducer - takes initialState as state and an empty object as the action - this\n// will be the action defined in actions.js\nexport const searchRobots = (state= initialStateSearch, action={}) => {\n  switch (action.type) {\n    case CHANGE_SEARCH_FIELD:\n      // Assign a new state that has the current state, along with the state that we set the new value for\n      // Can also be done as {...state, searchField: action.payload}\n      return Object.assign({}, state, {searchField: action.payload});\n    default:\n      return state;\n  }\n}\n\n// Initial state for the requestRobots reducer\nconst initialStateRobots = {\n  robots: [],\n  error: '',\n  isPending: false\n}\n\nexport const requestRobots = (state=initialStateRobots, action={}) => {\n  switch (action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, {isPending: true});\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, {robots: action.payload, isPending: false});\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, {error: action.payload, isPending: false})\n    default:\n      return state;\n  }\n}\n","import {searchRobots, requestRobots} from './reducers';\nimport {combineReducers} from \"redux\";\n\nexport const rootReducer = combineReducers({\n  searchRobots,\n  requestRobots,\n})\n","import {Component} from 'react';\n\nclass Header extends Component {\n  // Determine when to render the header - only render once as it doesn't need to re-render\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    return false;\n  }\n\n  render() {\n    return (\n      <>\n        <h1 className='f1'>RoboFriends</h1>\n      </>\n    )\n  }\n}\n\nexport default Header;\n","const Card = ({robot}) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <img src={`https://robohash.org/${robot.id}?size=200x200`} alt=\"Robots\"/>\n      <div>\n        <h2>{robot.name}</h2>\n        <p>{robot.email}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Card;\n","import Card from \"./Card\";\n\nconst CardList = ({robots}) => {\n  return (\n    <>\n      {\n        robots &&\n        robots.map(robot => (\n          <Card key={robot.id} robot={robot}/>\n        ))\n      }\n    </>\n  )\n}\n\nexport default CardList;\n","const SearchBox = ({onSearchChange}) => {\n  return (\n    <div className='pa2'>\n      <input\n        aria-label='Search Robots'\n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='Search robots...'\n        onChange={onSearchChange}\n      />\n    </div>\n  )\n}\n\nexport default SearchBox;\n","const Scroll = ({children}) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '1px solid black', height: 700}}>\n      {children}\n    </div>\n  )\n}\n\nexport default Scroll;\n","import {Component, Fragment} from \"react\";\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      hasError: false,\n    }\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({hasError: true});\n  }\n\n  render() {\n    const {hasError} = this.state;\n    const {children} = this.props;\n    return (\n      <Fragment>\n        {\n          hasError &&\n          <h1>There has been an error!</h1>\n        }\n        {\n          !hasError &&\n          children\n        }\n      </Fragment>\n    )\n  }\n}\n\nexport default ErrorBoundary;\n","import {Component} from \"react\";\n// Redux import\nimport {connect} from 'react-redux';\nimport Header from \"../components/Header\";\nimport CardList from \"../components/CardList\";\nimport SearchBox from \"../components/SearchBox\";\nimport Scroll from \"../components/Scroll\";\nimport ErrorBoundary from \"../components/ErrorBoundary\";\nimport './App.css';\n// Import Redux actions\nimport {setSearchField, requestRobots} from \"../redux/actions\";\n\n// Gets the whole state and return the piece of state that we're interested in (replaces searchField in App state)\nconst mapStateToProps = state => ({\n  searchField: state.searchRobots.searchField,\n  robots: state.requestRobots.robots,\n  error: state.requestRobots.error,\n  isPending: state.requestRobots.isPending,\n});\n\n// Gets dispatch as a param, which allows us to dispatch the action\nconst mapDispatchToProps = dispatch => ({\n  // onSearchChange is the prop which gets the event target value (search text)\n  onSearchChange: event => dispatch(setSearchField(event.target.value)),\n  onRequestRobots: () => dispatch(requestRobots())\n});\n\nclass App extends Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const {searchField, onSearchChange, robots, isPending} = this.props;\n    const filteredRobots = robots.filter(robots => (\n      robots.name.toLowerCase().includes(searchField.toLowerCase())\n    ));\n\n    return (\n      <div className='tc'>\n        {\n          isPending &&\n          <h1 className='f1'>Loading...</h1>\n        }\n        {\n          !isPending &&\n          <>\n            <Header/>\n            <SearchBox onSearchChange={onSearchChange}/>\n            <Scroll>\n              <ErrorBoundary>\n                <CardList robots={filteredRobots}/>\n              </ErrorBoundary>\n            </Scroll>\n          </>\n        }\n      </div>\n    )\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(App);\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS,\n  REQUEST_ROBOTS_FAILED\n} from \"./constants\";\n\nexport const setSearchField = text => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n});\n\n// This action is a higher order function - it's an anonymous function that return another function which takes\n// dispatch as a parameter, which then allows us to use that when dispatching our action\nexport const requestRobots = () => dispatch => {\n  dispatch({type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users/')\n    .then(res => res.json())\n    .then(data => dispatch({\n      type: REQUEST_ROBOTS_SUCCESS,\n      payload: data\n    }))\n    .catch(error => dispatch({\n      type: REQUEST_ROBOTS_FAILED,\n      payload: error\n    }));\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n// Redux imports\nimport {Provider} from 'react-redux'\nimport {createStore, applyMiddleware} from \"redux\";\nimport {createLogger} from \"redux-logger\";\n// For redux thunk - async actions (API calls)\nimport thunkMiddleware from 'redux-thunk';\nimport {rootReducer} from \"./redux/rootReducer\";\nimport './index.css';\nimport 'tachyons';\nimport App from \"./containers/App\";\nimport {searchRobots} from \"./redux/reducers\";\nimport * as serviceWorker from './serviceWorker';\n\n// Create middleware logger - passed into createStore as second param\nconst logger = createLogger();\n// Create store and pass into Provider - this is normally the root reducer\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\n// Wrap app in Provider to give it access to the store\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App/>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}